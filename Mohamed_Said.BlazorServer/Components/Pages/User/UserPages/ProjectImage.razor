@page "/{ProjectTitle}/Images"
@layout NoLayout
@inject IProjectService projectService
@inject NavigationManager navigationManager
@if (projectImageDtos is not null && projectImageDtos.Any())
{
    <!-- Gallery Modal/Overlay -->
    <div class="fixed left-0 top-0 w-full h-full bg-black/90 z-50 items-center justify-center transition-all duration-300">

        <!-- Close Button -->
        <button id="closeGalleryModal" @onclick="CloseImage"
                class="absolute top-3 right-3 text-white/80 hover:text-white transition-colors duration-300">
            <svg class="w-8 h-8" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
            </svg>
        </button>

        <!-- Image Counter -->
        <div class="absolute top-3 left-3 text-white/80">
            <span id="currentImageNum">@(currentIndex+1)</span>
            <span>/</span>
            <span id="totalImages">@(projectImageDtos.Count)</span>
        </div>
        <!-- Modal Content -->
        <div class="w-full max-w-5xl px-4 py-4 mx-auto">
            @if (currentImage is not null)
            {
                <!-- Image Title -->
                <h3 id="imageTitle"
                    class="text-white text-xl font-semibold mb-4 text-center">
                    @(currentImage.Title ?? "Image Title")
                </h3>

                <!-- Image Container -->
                <div class="relative aspect-[16/9] bg-black/50 rounded-lg overflow-hidden">
                    
                    <!-- Main Image -->
                    <!--fixed top-0 left-0 right-0 bottom-0 for full screen-->
                    <img id="galleryImage"
                         class="w-full h-full object-fill transition-opacity duration-300 "
                         src="@(currentImage.ImageUrl)"
                         alt=""
                         onload="this.style.opacity=1"
                         style="opacity: 0" />
                </div>
            }
            
        </div>

        <!-- Navigation Arrows -->
        <button @onclick="PreviousImage" disabled="@(currentIndex == 0 ? true : false )"
                class="absolute top-1/2 -left-1 xl:left-12
           text-white/80 hover:text-white transition-colors duration-300
            disabled:opacity-30 disabled:cursor-not-allowed">
            <svg class="w-10 h-10" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7" />
            </svg>
        </button>

        <button @onclick="NextImage" disabled="@(currentIndex == projectImageDtos.Count-1 ? true : false )"
                class="absolute top-1/2 -right-1 xl:right-12
            text-white/80 hover:text-white transition-colors duration-300
            disabled:opacity-30 disabled:cursor-not-allowed">
            <svg class="w-10 h-10" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7" />
            </svg>
        </button>

        
    </div>
}

@code {
    private ProjectDto? projectDto;
    private List<ProjectImageDto>? projectImageDtos;
    private ProjectImageDto? currentImage;
    private int currentIndex = 0;


    [Parameter]
    public string? ProjectTitle { get; set; }


    protected override async Task OnInitializedAsync()
    {
        Console.WriteLine("start images page init");


        Console.WriteLine("project title " + ProjectTitle);
        Console.WriteLine("project title " + (ProjectTitle == ""));
        Console.WriteLine("project title " + (ProjectTitle is null));

        if (!string.IsNullOrEmpty(ProjectTitle))
        {
            Console.WriteLine("project title is not null " + ProjectTitle);
            projectDto = await projectService.GetByTitleAsync(ProjectTitle);
            if (projectDto is not null && projectDto.ProjectImages is not null && projectDto.ProjectImages.Any())
            {
                projectImageDtos = projectDto.ProjectImages.ToList();
                currentImage = projectImageDtos.FirstOrDefault();
                Console.WriteLine(currentImage?.Title ?? "ff");
                currentIndex = 0;

            }
            else
            {
                Console.WriteLine("go to not found due to projectDTO");
                // If the project is not found, navigate to the NotFound page
                navigationManager.NavigateTo("/NotFound");
                return; // Exit early if the project is not found
            }
        }
        else
        {
            Console.WriteLine("ProjectTitle is null, navigating to NotFound");
            navigationManager.NavigateTo("/NotFound");
            return; // Exit early if the ProjectTitle is null
        }
        Console.WriteLine("End of Projectimage initi");

    }


    private void NextImage()
    {
        if (projectImageDtos is not null && currentIndex < projectImageDtos.Count - 1)
        {
            currentIndex++;
            currentImage = projectImageDtos[currentIndex];
        }
    }

    private void PreviousImage()
    {
        if (projectImageDtos is not null && currentIndex > 0)
        {
            currentIndex--;
            currentImage = projectImageDtos[currentIndex];
        }
    }

    private void CloseImage()
    {
        currentImage = null;
        currentIndex = 0;
        navigationManager.NavigateTo("/",true);
        return;
    }
    
}
