
@if (ProjectImageDtos is not null && ProjectImageDtos.Any())
{
    <!-- Gallery Modal/Overlay -->
    <div id="galleryModal"
         class="@(ShowImage ? "":"hidden") fixed left-0 top-0 w-full h-full bg-black/90 z-50 flex items-center justify-center transition-all duration-300">

        <!-- Close Button -->
        <button id="closeGalleryModal" @onclick="CloseImage"
                class="absolute top-3 right-3 text-white/80 hover:text-white transition-colors duration-300">
            <svg class="w-8 h-8" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
            </svg>
        </button>

        <!-- Image Counter -->
        <div class="absolute top-3 left-3 text-white/80">
            <span id="currentImageNum">@(currentIndex+1)</span>
            <span>/</span>
            <span id="totalImages">@(ProjectImageDtos.Count)</span>
        </div>
        <!-- Modal Content -->
        <div class="w-full max-w-5xl px-4 py-4 mx-auto">
            @if (currentImage is not null)
            {
                <!-- Image Title -->
                <h3 id="imageTitle"
                    class="text-white text-xl font-semibold mb-4 text-center">
                    @(currentImage.Title ?? "Image Title")
                </h3>

                <!-- Image Container -->
                <div class="relative aspect-[16/9] bg-black/50 rounded-lg overflow-hidden">
                    
                    <!-- Main Image -->
                    <!--fixed top-0 left-0 right-0 bottom-0 for full screen-->
                    <img id="galleryImage"
                         class="w-full h-full object-contain transition-opacity duration-300"
                         src="@(currentImage.ImageUrl)"
                         alt=""
                         onload="this.style.opacity=1"
                         style="opacity: 0" />
                </div>
            }
            
        </div>

        <!-- Navigation Arrows -->
        <button @onclick="PreviousImage" disabled="@(currentIndex == 0 ? true : false )"
                class="absolute top-1/2 -left-1 xl:left-12
           text-white/80 hover:text-white transition-colors duration-300
            disabled:opacity-30 disabled:cursor-not-allowed">
            <svg class="w-10 h-10" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7" />
            </svg>
        </button>

        <button @onclick="NextImage" disabled="@(currentIndex == ProjectImageDtos.Count-1 ? true : false )"
                class="absolute top-1/2 -right-1 xl:right-12
            text-white/80 hover:text-white transition-colors duration-300
            disabled:opacity-30 disabled:cursor-not-allowed">
            <svg class="w-10 h-10" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7" />
            </svg>
        </button>

        
    </div>
}

@code {
    [Parameter]
    public List<ProjectImageDto>? ProjectImageDtos { get; set; }
    private ProjectImageDto? currentImage;
    private int currentIndex = 0;
    [Parameter]
    public bool ShowImage {get ; set; } = false; // Used to control visibility of the modal

    [Parameter]
    public EventCallback CloseImageModal { get; set; }


    protected override void OnParametersSet()
    {
        if (ShowImage)
        {
            if (ProjectImageDtos is not null && ProjectImageDtos.Any())
            {
                currentImage = ProjectImageDtos.FirstOrDefault();
                currentIndex = 0;
            }
        }
        base.OnParametersSet();
    }

    private void NextImage()
    {
        if (ProjectImageDtos is not null && currentIndex < ProjectImageDtos.Count - 1)
        {
            currentIndex++;
            currentImage = ProjectImageDtos[currentIndex];
        }
    }

    private void PreviousImage()
    {
        if (ProjectImageDtos is not null && currentIndex > 0)
        {
            currentIndex--;
            currentImage = ProjectImageDtos[currentIndex];
        }
    }

    private void CloseImage()
    {
        currentImage = null;
        currentIndex = 0;
        CloseImageModal.InvokeAsync();
    }
    
}
