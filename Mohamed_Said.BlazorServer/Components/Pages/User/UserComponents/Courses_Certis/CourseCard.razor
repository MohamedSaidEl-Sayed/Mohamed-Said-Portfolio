
@if(Course is not null)
{
    <!-- Course Card -->
    <div class="group bg-white dark:bg-dark-primary rounded-2xl p-6
                        border border-gray-100 dark:border-gray-800
                        hover:shadow-xl transition-all duration-300
                        hover:-translate-y-1">

        <!-- Status -->
        <div class="flex items-center gap-2 mb-2">
            @if(Course.Status == CourseStatus.Completed)
            {
                <span class="px-3 py-1 text-sm rounded-full bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-200 transition-colors duration-300">
                    ✅ Completed
                </span>
            }
            else if(Course.Status == CourseStatus.InProgress)
            {
                <span class="px-3 py-1 text-sm rounded-full bg-yellow-100 text-yellow-800 dark:bg-yellow-900 dark:text-yellow-200 transition-colors duration-300">
                    ⏳ In Progress
                </span>
            } 
        </div>

        <!-- Course Title -->
        <h3 class="text-xl font-semibold mb-2 text-gray-800 dark:text-white group-hover:text-brand-blue transition-colors duration-300">
            @(Course.Title ?? "Course Title")
        </h3>

        <!-- Course Description -->
        <p title="@(Course.Description ?? "This is a brief description of the course. It covers various topics and provides in-depth knowledge.")" 
            class="text-sm text-gray-600 dark:text-gray-300 mb-4 line-clamp-2 transition-colors duration-300">
            @(Course.Description ?? "This is a brief description of the course. It covers various topics and provides in-depth knowledge.")
        </p>

        @if(Course.CourseSkills is not null && Course.CourseSkills.Any())
        {
            <!-- Skills Learned -->
            <div class="mb-6">
                <h4 class="text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider mb-2 transition-colors duration-300">Skills Covered</h4>
                <div class="flex flex-wrap gap-2">
                    @foreach(CourseSkillDto courseSkill in Course.CourseSkills)
                    {
                        <span class="px-2 py-1 text-xs rounded-full @(courseSkill?.Skill?.BackgroundLightColor) 
                                                                   dark:@(courseSkill?.Skill?.BackgroundDarkColor)
                                                                    @(courseSkill?.Skill?.TextLightColor)
                                                                    dark:@(courseSkill?.Skill?.TextDarkColor)
                                                                    transition-colors duration-300">
                            @(courseSkill?.Skill?.Name ?? "Skill Name")
                        </span>
                    }
                </div>
            </div>
        }
        

        @if(Course.CourseLinks is not null && Course.CourseLinks.Any())
        {
            <!-- Links -->
            <div class="border-t border-gray-200 dark:border-gray-700 transition-colors duration-300">
                @foreach (CourseLinkDto courseLink in Course.CourseLinks)
                {
                    <div class="flex items-center justify-between flex-wrap pt-4 ">
                        <a href="@courseLink?.Url" class="text-sm font-medium text-brand-blue hover:text-brand-blue/80 flex items-center gap-1 transition-colors duration-300">
                            @(courseLink?.Title ?? "Course Link")
                            <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 6H6a2 2 0 00-2 2v10a2 2 0 002 2h10a2 2 0 002-2v-4M14 4h6m0 0v6m0-6L10 14" />
                            </svg>
                        </a>
                        <div class="flex flex-wrap items-center gap-1 flex-wrap text-sm text-light-text-secondary dark:text-dark-text-secondary transition-colors duration-300">
                            <span class="flex items-center gap-1">
                                <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 12a9 9 0 01-9 9m9-9a9 9 0 00-9-9m9 9H3m9 9a9 9 0 01-9-9m9 9c1.657 0 3-4.03 3-9s-1.343-9-3-9m0 18c-1.657 0-3-4.03-3-9s1.343-9 3-9m-9 9a9 9 0 019-9" />
                                </svg>
                                @(courseLink?.Platform ?? "Platform"),
                            </span>
                            <span class="flex items-center gap-1">
                                <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z" />
                                </svg>
                                @(courseLink?.Instructor ?? "Instructor")
                            </span>
                        </div>
                    </div>
                }
            </div>

        }
        
    </div>
}
      
@code {
    [Parameter]
    public CourseDto? Course { get; set; } = new CourseDto();

    protected override void OnInitialized()
    {
        if (Course is not null)
        {
            if (Course.CourseSkills is not null && Course.CourseSkills.Any())
                Course.CourseSkills = Course.CourseSkills.OrderBy(ps => ps.DisplayOrder).ToList();

            if (Course.CourseLinks is not null && Course.CourseLinks.Any())
                Course.CourseLinks = Course.CourseLinks.OrderBy(ps => ps.DisplayOrder).ToList();
        }
        
        base.OnInitialized();
    }
}
